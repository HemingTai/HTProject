/*------------ git 相关命令 ------------*/

新增修改：git add .
取消最近一次新增修改：git reset HEAD
提交修改：git commit -m"更新信息"
拉取远程代码：git pull(origin 分支名)
提交代码到远程：git push(origin 分支名)

查看本地分支：git branch
查看本地及远程分支：git branch -a
创建分支：git branch 分支名
切换分支：git checkout 分支名
fetch分支：git fetch
删除分支：git branch -d 分支名
删除远程分支：git push origin --delete 分支名
合并分支：git merge 分支名
创建新分支并追踪远程分支：
    1、git branch --set-upstream-to=<远程主机名>/<远程分支名> <本地分支名>
    2、git push -u <远程主机名> <本地分支名>
    3、git checkout -b <本地分支名> <远程主机名>/<远程分支名>
    新分支指针指向 <远程主机名>/<远程分支名> 所指的位置，具体位置可用 git log --oneline --graph 查看
已有分支追踪远程分支：
    git branch --set-upstream-to=<远程主机名>/<远程分支名>

查看tag：git tag
创建tag：git tag tag名
删除tag：git tag -d tag名
删除远程tag：git push origin :refs/tags/tag名
推tag到仓库：git push origin tag名

查看local commit日志：git log
查看remote commit日志：git reflog

git 设置代理:
	git config --global http.proxy 'web-proxy.ap.softwaregrp.net:8080'
	git config --global https.proxy 'web-proxy.ap.softwaregrp.net:8080'
git 取消代理:
	git config --global --unset http.proxy
	git config --global --unset https.proxy

git fork项目：
	1、先fork到自己的仓库中
	2、clone项目，并添加远程项目路径
		git clone xxxxxxx.git
		git remote add upstream xxxxxxx.git
		使用git remote 查看，可以看到有upstream 和 origin
	3、源项目与自己的本地代码进行合并
		git pull upstream 或 git fetch upstream 或 git merge upstream
	4、通过pull request提交到他人项目中
 
git 切换ssh方式登录：
    1、打开终端 cd 到 ~/.ssh，查看是否有 id_rsa 和 id_rsa.pub文件，如果没有则执行命令 ssh -keygen，一路回车直到结束
    2、在 github 上的setting中，把 id_rsa.pub 文件的公钥添加到 SSH KEY 中
    3、在终端 cd 到项目路径，然后执行 git remote -v 查看 origin 是否是git@github.xxxx/username/reponame.git形式
    4、如果不是则执行 git remote remove origin 先移除之前的 https 的方式
    5、再执行 git remote add origin git@github.xxx:username/reponame.git
    6、最后执行 git remote -v 查看是否设置成功

git rebase对相关的commit做删除：
	1、git log 找到想要删除的提交id(id-a)之前一次的提交id(id-b)
	2、git rebase -i id-b
    3、把不需要的commit行首的pick改成d(或者drop)即删除
	4、git push origin branch-name --force
    如果不想删除或是合并则执行 git rebase --abort
 
 git rebase对相关的commit做合并：
    1、git log 找到想要合并的提交id(id-a)之前一次的提交id(id-b)
    2、git rebase -i id-b
    3、把不需要的commit行首的pick改成s(或者squash)即合并，注意列出来的commit记录必须保持第一条记录的行首是pick(或者p)，否则无法合并
    4、修改合并后的commit信息
    5、git push origin branch-name --force
    如果不想合并则执行 git rebase --abort
 
 git 回退到指定版本：
    1、git log 找到想要回退的id
    2、git reset --hard id
    3、git push origin HEAD --force
    
 git 将当前分支某几个commit复制到另一个branch
    1、git rebase [startpoint] [endpoint] --onto [branchName]
    2、git checkout [branchName]
    3、git reset --hard [latestCommitId]
    
 git 打包生成差异化文件
    git format-patch -1 <commit-id>

 git 合并patch
 	git apply patch路径

/*------------ fastlane 相关命令 ------------*/

fastlane打包：fastlane action名称（如：fastlane development_build）

/*------------ Rubygem 相关命令 ------------*/

使用代理：sudo gem install xxx -p http://xxx.xxxx.xx:xxxx

/*------------ i18N 相关命令 ------------*/
export:
    1、Xcode选择project —— 菜单栏选择Editor —— Export for localization —— 只选择导出English —— 选择导出位置并导出
    2、把导出的文件夹里的en.xliff文件copy到filter.sh文件所在位置 —— 打开终端并cd到filter.sh文件所在路径 —— 执行./filter.sh -f en.xliff
    3、执行命令之后，会在当前路径下多出一个out文件夹，把里面的en.xliff文件copy到上一层export文件下并替换旧的en.xliff文件
    4、当前路径下只保留export文件夹、filter.sh、import.sh三个文件，其余文件删除
import:
    1、打开终端并cd到filter.sh文件所在路径 —— 执行 sh import.sh

/*------------ pod 相关命令 ------------*/
设置pod：pod setup
初始化pod：pod init
安装pod：pod install（会更新远程pod仓库，速度可能会比较慢）
安装pod：pod install --verbose --no-repo-update（不会更新远程pod仓库，速度比较快）
更新pod：pod update（会更新远程pod仓库，速度可能会比较慢）
更新pod：pod update --verbose --no-repo-update（不会更新远程pod仓库，速度比较快）

创建私有仓库spec文件：pod spec create 仓库名
验证本地spec文件是否正确：pod lib lint （pod lib lint --allow-warnings 验证并忽略警告）
验证远程spec文件是否正确：pod spec lint HTSpecs.podspec --allow-warnings --use-libraries
导入本地pod仓库：pod 'Example', :path => '本地pod仓库的地址（如：~/Documents/ModuleProject/ModuleA）'
推送本地仓库到远程：pod repo push 远程仓库名 私有仓库spec文件名（如：pod repo push HTSpecs HTSpecs.podspec）
pod导入远程私有仓库，需要在Podfile中指定source（如：source "https://github.com/HemingTai/HTSpecs.git"）
pod导入三方和私有仓库，需要在Podfile中指定私有source和三方source：
如：source "https://github.com/HemingTai/HTSpecs.git"，source "https://github.com/CocoaPods/Specs.git"

将远程仓库发布到cocoaPods:
1、可使用 pod trunk me 来验证本地账户
2、可使用 pod trunk info 仓库名 来获取该仓库相关信息
3、发布 pod trunk push
